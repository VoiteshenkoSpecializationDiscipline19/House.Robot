//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     DSS Runtime Version: 2.0.730.3
//     CLR Runtime Version: 2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using W3C.Soap;
using xml = System.Xml;
using System.ComponentModel;

using pxdimmer = Robotics.GenericHouseControls.Dimmer;
using zw = Robotics.ZWave.Controller;

namespace Robotics.ZWave.Dimmer
{


    /// <summary>
    /// Zwavehousecontrols Service
    /// </summary>
    [DisplayName("ZWave Dimmer")]
    [Description("ZWave Dimmer Service")]
    [Contract(Contract.Identifier)]
    [AlternateContract(pxdimmer.Contract.Identifier)]
    public class ZWaveDimmerService : DsspServiceBase
    {

        /// <summary>
        /// _state
        /// </summary>
        [ServiceState]
        [InitialStatePartner(Optional = true)]
        private pxdimmer.GenericDimmerState _state = new pxdimmer.GenericDimmerState();

        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/zwavedimmer", AllowMultipleInstances = true)]
        private pxdimmer.GenericDimmerOperations _mainPort = new pxdimmer.GenericDimmerOperations();

        [Partner("ZWaveController", Contract = zw.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate, Optional = false)]
        private zw.ZWaveControllerOperations _zWaveControllerPort = new zw.ZWaveControllerOperations();
        private zw.ZWaveControllerOperations _zWaveControllerNotifyPort = new zw.ZWaveControllerOperations();

        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public ZWaveDimmerService(DsspServiceCreationPort creationPort) :
            base(creationPort)
        {
        }

        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
            base.Start();
            // Add service specific initialization here.
            if (_state == null)
            {
                _state = new pxdimmer.GenericDimmerState();
            }
        }

        /// <summary>
        /// Turn the light on
        /// </summary>
        /// <param name="update"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> OnHandler(pxdimmer.On update)
        {
            LogInfo(string.Format("Z-Wave Dimmer => Id:{0} On", _state.Id));
            //TODO: Error handling
            //_zWaveControllerPort.DeviceOn(_state.Id);

            update.ResponsePort.Post(DefaultUpdateResponseType.Instance);
            
            yield break;
        }

        /// <summary>
        /// Turn the light off
        /// </summary>
        /// <param name="update"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> OffHandler(pxdimmer.Off update)
        {
            LogInfo(string.Format("Z-Wave Dimmer => Id:{0} Off", _state.Id));

            //_zWaveControllerPort.DeviceOff(_state.Id);

            update.ResponsePort.Post(DefaultUpdateResponseType.Instance);
            
            yield break;
        }

        /// <summary>
        /// Set the dim level
        /// </summary>
        /// <param name="update"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> SetLevelHandler(pxdimmer.SetLevel update)
        {
            LogInfo(string.Format("Z-Wave Dimmer => Id:{0} Level:{1}", _state.Id, update.Body.Level));

            _state.Level = update.Body.Level;

            //_zWaveControllerPort.SetDeviceLevel(_state.Id, _state.Level);            

            update.ResponsePort.Post(DefaultUpdateResponseType.Instance);

            yield break;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     DSS Runtime Version: 2.0.730.3
//     CLR Runtime Version: 2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ComponentModel;
using System.Net;
using System.Net.Mail;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using W3C.Soap;
using System;



namespace Robotics.EmailSender
{


    /// <summary>
    /// Implementation class for EmailSender
    /// </summary>
    [DisplayName("EmailSender")]
    [Description("The EmailSender Service")]
    [Contract(Contract.Identifier)]
    public class EmailSenderService : DsspServiceBase
    {

        /// <summary>
        /// _state
        /// </summary>
        [ServiceState]
        [InitialStatePartner(Optional = false, ServiceUri = "EmailSender.Config.xml")]
        private EmailSenderState _state = null;

        private SmtpClient client;

        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/emailsender", AllowMultipleInstances = true)]
        private EmailSenderOperations _mainPort = new EmailSenderOperations();

        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public EmailSenderService(DsspServiceCreationPort creationPort) :
            base(creationPort)
        {
        }

        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
            client = new SmtpClient(_state.Host, _state.Port);
            client.EnableSsl = _state.EnableSsl;
            client.Credentials = new NetworkCredential(_state.UserName, _state.Password);

            base.Start();
        }

        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public void SendMessageHandler(SendMessage message)
        {
            var email = new MailMessage();
            LogInfo(message.Body.CC.ToString() + message.Body.From + message.Body.Message);
            email.Subject = message.Body.Subject;
            email.Body = message.Body.Message;
            email.From = new MailAddress("nikitai12345@mail.ru");

            if (message.Body.To != null)
                foreach (var address in message.Body.To)
                    email.To.Add(address);

            if (message.Body.CC != null)
                foreach (var address in message.Body.CC)
                    email.CC.Add(address);

            try
            {
                client.Send(email);
                message.ResponsePort.Post(DefaultSubmitResponseType.Instance);
            }
            catch (Exception ex)
            {
                message.ResponsePort.Post(Fault.FromException(ex));
            }
        }
    }
}

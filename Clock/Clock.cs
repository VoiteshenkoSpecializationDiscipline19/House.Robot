//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     DSS Runtime Version: 2.0.730.3
//     CLR Runtime Version: 2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using DateTimeExtensions;
using Microsoft.Ccr.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using Microsoft.Dss.Services.SubscriptionManager;
using W3C.Soap;


namespace Robotics.Clock
{


    /// <summary>
    /// Implementation class for Clock
    /// </summary>
    [DisplayName("Clock")]
    [Description("The Clock Service")]
    [Contract(Contract.Identifier)]
    public partial class ClockService : DsspServiceBase
    {

        /// <summary>
        /// _state
        /// </summary>
        [ServiceState]
        [InitialStatePartner(Optional = false, ServiceUri = "Clock.Config.xml")]
        private ClockState _state = null;

        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/clock", AllowMultipleInstances = true)]
        private ClockOperations _mainPort = new ClockOperations();

        [SubscriptionManagerPartner]
        private SubscriptionManagerPort _submgrPort = new SubscriptionManagerPort();

        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public ClockService(DsspServiceCreationPort creationPort) :
            base(creationPort)
        {
        }

        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
            base.Start();

            if (_state == null)
                LogWarning("The Clock service is not currently configured with Longitude and Latitude Values." +
                            "\nCertain features will not function without Longitude and Latitude values");
            else
                SpawnIterator(SunriseSunsetAlarmTask);
        }


        /// <summary>
        /// Set the sunrise and sunset alarms.
        /// </summary>
        /// <remarks>
        /// The SunriseSunsetAlarmTask does the following:
        /// 1. Get the current date/time
        /// 2. If it's before sunrise, set an alarm for the next sunrise,
        /// 3. else if it's after sunrise and before sunset, set an alarm for the next sunset,
        /// 4. else if it's after both sunrise and sunset, set an alarm for the next day's sunrise.
        /// </remarks>
        public IEnumerator<ITask> SunriseSunsetAlarmTask()
        {
            while (true)
            {
                // Get current datetime at the time zone specified in _state.TimeZoneInfo
                // Note: The time zone might not be the one the computer is running in.
                var currentDateTime = TimeZoneInfo.ConvertTime(DateTime.Now, _state.TimeZoneInfo);

                var date = currentDateTime.Date; // Get just the date portion for computing sunrise/sunset
                var sunset = date.Sunset(_state.Longitude, _state.Latitude, _state.TimeZoneInfo);
                var sunrise = date.Sunrise(_state.Longitude, _state.Latitude, _state.TimeZoneInfo);

                if (currentDateTime < sunrise) // Set an alarm for sunrise.
                {
                    var timeSpan = sunrise - currentDateTime;

                    LogInfo(string.Format("Sunrise in {0} at {1}", timeSpan, sunrise));
                    LogInfo(string.Format("Timezone {0}", _state.TimeZoneInfo.DisplayName));

                    yield return TimeoutPort(timeSpan).Receive(
                        dt =>
                        {
                            LogInfo(string.Format("Sending Sunrise notification at {0}", dt));
                            SendNotification(_submgrPort, new Sunrise());
                        });

                }
                else if (currentDateTime < sunset) // or one for sunset.
                {
                    // Set the sunset alarm.
                    var timeSpan = sunset - currentDateTime;

                    LogInfo(string.Format("Sunset in {0} at {1}", timeSpan, sunset));
                    LogInfo(string.Format("Timezone {0}", _state.TimeZoneInfo.DisplayName));

                    yield return TimeoutPort(timeSpan).Receive(
                        dt =>
                        {
                            LogInfo(string.Format("Sending Sunset notification at {0}", dt));
                            SendNotification(_submgrPort, new Sunset(dt));
                        });
                }
                else // or the next days sunrise
                {
                    date += TimeSpan.FromDays(1);
                    sunrise = date.Sunrise(_state.Longitude, _state.Latitude, _state.TimeZoneInfo);
                    var timeSpan = sunrise - currentDateTime;

                    LogInfo(string.Format("Sunrise in {0} at {1}", timeSpan, sunrise));
                    LogInfo(string.Format("Timezone {0}", _state.TimeZoneInfo.DisplayName));

                    yield return TimeoutPort(timeSpan).Receive(
                        dt =>
                        {
                            LogInfo(string.Format("Sending Sunrise notification at {0}", dt));
                            SendNotification(_submgrPort, new Sunrise(dt));

                        });
                }

            }
        }

        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> SubscribeHandler(Subscribe message)
        {
            SubscribeHelper(_submgrPort, message.Body, message.ResponsePort);
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> GetCurrentDateTimeHandler(GetCurrentDateTime message)
        {
            var currentDateTime = TimeZoneInfo.ConvertTime(DateTime.Now, _state.TimeZoneInfo);
            message.ResponsePort.Post(new DateTimeResponse { ReturnDateTime = currentDateTime });
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> CreateDateTimeHandler(CreateDateTime message)
        {
            var dt = new DateTime(
                message.Body.Year, message.Body.Month, message.Body.Day,
                message.Body.Hour, message.Body.Minute, message.Body.Second);

            message.ResponsePort.Post(new DateTimeResponse { ReturnDateTime = dt });
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> CreateDateHandler(CreateDate message)
        {
            var dt = new DateTime(message.Body.Year, message.Body.Month, message.Body.Day);

            message.ResponsePort.Post(new DateTimeResponse { ReturnDateTime = dt });
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> CreateDateTimeFromStringHandler(CreateDateTimeFromString message)
        {
            var dt = DateTime.Parse(message.Body.DateString);

            message.ResponsePort.Post(new DateTimeResponse { ReturnDateTime = dt });
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> GetSunriseTimeHandler(GetSunriseTime message)
        {
            if (_state == null)
            {
                message.ResponsePort.Post(Fault.FromException(new ArgumentException("Longitude and Latitude cannot be null")));
                yield break;
            }

            // Get the date portion only in case time had nonzero value;
            var date = message.Body.SunriseDate.Date;
            var response = new DateTimeResponse
            {
                ReturnDateTime = date.Sunrise(_state.Longitude, _state.Latitude, _state.TimeZoneInfo),
            };

            message.ResponsePort.Post(response);

            yield break;
        }


        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> GetSunsetTimeHandler(GetSunsetTime message)
        {
            if (_state == null)
            {
                message.ResponsePort.Post(Fault.FromException(new ArgumentException("Longitude and Latitude cannot be null")));
                yield break;
            }

            // Get the date portion only in case time had nonzero value;
            var date = message.Body.SunsetDate.Date;
            var response = new DateTimeResponse
            {
                ReturnDateTime = date.Sunset(_state.Longitude, _state.Latitude, _state.TimeZoneInfo),
            };

            message.ResponsePort.Post(response);

            yield break;
        }


        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> IsDaylightHandler(IsDaylight message)
        {
            if (_state == null)
            {
                message.ResponsePort.Post(Fault.FromException(new ArgumentException("To determine daylight, Longitude and Latitude cannot be null")));
                yield break;
            }

            var currentDateTime = TimeZoneInfo.ConvertTime(DateTime.Now, _state.TimeZoneInfo);
            var sunrise = currentDateTime.Sunrise(_state.Longitude, _state.Latitude, _state.TimeZoneInfo);
            var sunset = currentDateTime.Sunset(_state.Longitude, _state.Latitude, _state.TimeZoneInfo);

            bool isDaylight = currentDateTime > sunrise && currentDateTime < sunset;

            var response = new IsDaylightResponse { IsDaylight = isDaylight };
            message.ResponsePort.Post(response);

            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> SetAlarmHandler(SetAlarm message)
        {
            var currentDateTime = TimeZoneInfo.ConvertTime(DateTime.Now, _state.TimeZoneInfo);
            var timeSpan = message.Body.AlarmDateTime - currentDateTime;
            LogInfo(string.Format("Setting alarm for: {0}\nTimeout:{1}", message.Body.AlarmDateTime, timeSpan));

            Activate(
                TimeoutPort(timeSpan).Receive(
                alarmTime =>
                {
                    SendNotification(_submgrPort, new AlarmCompleted
                    {
                        Body = new AlarmCompletedMessage
                        {
                            Name = message.Body.Name,
                            AlarmDateTime = alarmTime
                        }
                    });
                }));

            message.ResponsePort.Post(DefaultUpdateResponseType.Instance);

            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> SetDailyAlarmHandler(SetDailyAlarm message)
        {
            LogInfo("SetDailyAlarm");
            LogInfo(message.Body.StartDate.ToString());

            var recurrence = new DailyRecurrence
            {
                StartDateTime = message.Body.StartDate,
                EndDateTime = message.Body.EndDate,
                Interval = message.Body.Interval,
                DaysOfweek = (DateTimeExtensions.DaysOfWeek)message.Body.DaysOfWeek
            };

            SpawnIterator(recurrence, IterateAlarms);

            message.ResponsePort.Post(DefaultUpdateResponseType.Instance);
            yield break;
        }


        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> SetWeeklyAlarmHandler(SetWeeklyAlarm message)
        {
            var r = message;
            LogInfo(r.Body.DaysOfWeek.ToString());
            LogInfo("SetWeeklyAlarm");
            var recurrence = new WeeklyRecurrence
            {
                StartDateTime = message.Body.StartDate,
                EndDateTime = message.Body.EndDate,
                Interval = message.Body.Interval,
                DaysOfweek = (DateTimeExtensions.DaysOfWeek)message.Body.DaysOfWeek
            };

            SpawnIterator(recurrence, IterateAlarms);

            message.ResponsePort.Post(DefaultUpdateResponseType.Instance);
            yield break;
        }

        public IEnumerator<ITask> IterateAlarms(DateTimeRecurrence recurrence)
        {
            foreach (var dt in recurrence)
            {
                var currentDateTime = TimeZoneInfo.ConvertTime(DateTime.Now, _state.TimeZoneInfo);
                var timeSpan = dt - currentDateTime;

                // Skip ahead if the time in the recurrence has already passed.
                if (timeSpan.Milliseconds < 0)
                    continue;

                LogInfo(string.Format("Setting alarm for: {0}\nTimeout:{1}", dt, timeSpan));

                yield return TimeoutPort(timeSpan).Receive(
                    alarmTime =>
                    {
                        SendNotification(_submgrPort, new AlarmCompleted { Body = new AlarmCompletedMessage { AlarmDateTime = alarmTime } });
                    });
            }
        }

        //[ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        //public IEnumerator<ITask> QueryLongitudeHandler(QueryLongitude message)
        //{
        //    message.ResponsePort.Post(new QueryLongitudeResponse { Longitude = 123 });
        //    yield break;
        //}
    }
}

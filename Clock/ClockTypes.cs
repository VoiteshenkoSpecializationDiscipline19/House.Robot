//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     DSS Runtime Version: 2.0.730.3
//     CLR Runtime Version: 2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using W3C.Soap;
using clock = Robotics.Clock;
using System.ComponentModel;
using DateTimeExtensions;
using Microsoft.Dss.Core.DsspHttp;


namespace Robotics.Clock
{


    /// <summary>
    /// Clock Contract class
    /// </summary>
    public sealed class Contract
    {

        /// <summary>
        /// The Dss Service contract
        /// </summary>
        [DataMember]
        public const String Identifier = "http://house.robot/2008/05/clock.html";
    }

    /// <summary>
    /// The Clock State
    /// </summary>
    [DataContract]
    public class ClockState
    {
        [DataMember]
        public double Longitude { get; set; }

        [DataMember]
        public double Latitude { get; set; }

        [DataMember]
        public string TimeZoneId { get; set; }

        internal TimeZoneInfo TimeZoneInfo
        {
            get
            {
                return string.IsNullOrEmpty(TimeZoneId) ? TimeZoneInfo.Local : TimeZoneInfo.FindSystemTimeZoneById(TimeZoneId);
            }
        }
    }

    /// <summary>
    /// This is a serializable duplicate of the type that is in DateTimeExtensions.
    /// </summary>
    [DataContract]
    [Flags]
    public enum DaysOfWeek
    {
        Zero = 0x00,
        Sunday = 0x01,
        Monday = 0x02,
        Tuesday = 0x04,
        Wednesday = 0x08,
        Thursday = 0x10,
        Friday = 0x20,
        Saturday = 0x40
    }

    /// <summary>
    /// Clock Main Operations Port
    /// </summary>
    [ServicePort]
    public class ClockOperations : PortSet
        <
            DsspDefaultLookup,
            DsspDefaultDrop,
            Subscribe,
            Get,
            GetCurrentDateTime,
            CreateDateTime,
            CreateDate,
            CreateDateTimeFromString,
            GetSunriseTime, //TODO: Do i need this, or just get the whole state?
            GetSunsetTime,
            IsDaylight,
            SetAlarm,
            SetDailyAlarm,
            SetWeeklyAlarm,
            AlarmCompleted,
            Sunrise, //TODO: Add support for sunrise/sunset offset alarms.
            Sunset,
            HttpPost,
            HttpQuery
        >
    {
    }


    /// <summary>
    /// Clock Get Operation
    /// </summary>
    public class Get : Get<GetRequestType, PortSet<ClockState, Fault>>
    {

        /// <summary>
        /// Clock Get Operation
        /// </summary>
        public Get()
        {
        }

        /// <summary>
        /// Clock Get Operation
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) :
            base(body)
        {
        }

        /// <summary>
        /// Clock Get Operation
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<ClockState, W3C.Soap.Fault> responsePort) :
            base(body, responsePort)
        {
        }
    }

    public class Subscribe : Subscribe<SubscribeRequestType, DsspResponsePort<SubscribeResponseType>>
    {
    }

    [DataContract]
    public class GetCurrentDateTimeRequest
    {
    }

    [DataContract]
    public class DateTimeResponse
    {
        [DataMember]
        public DateTime ReturnDateTime { get; set; }
    }

    [DisplayName("CurrentDateTime")]
    [Description("Returns the current date and time")]
    public class GetCurrentDateTime : Submit<GetCurrentDateTimeRequest, DsspResponsePort<DateTimeResponse>>
    {
    }

    [DataContract]
    public class CreateDateTimeRequest
    {
        [DataMember]
        public int Year { get; set; }

        [DataMember]
        public int Month { get; set; }

        [DataMember]
        public int Day { get; set; }

        [DataMember]
        public int Hour { get; set; }

        [DataMember]
        public int Minute { get; set; }

        [DataMember]
        public int Second { get; set; }
    }

    public class CreateDateTime : Submit<CreateDateTimeRequest, DsspResponsePort<DateTimeResponse>>
    {
    }

    [DataContract]
    public class CreateDateRequest
    {
        [DataMember]
        public int Year { get; set; }

        [DataMember]
        public int Month { get; set; }

        [DataMember]
        public int Day { get; set; }
    }

    [Description("Create a DateTime with time portion = 0:0:00")]
    public class CreateDate : Submit<CreateDateRequest, DsspResponsePort<DateTimeResponse>>
    {
    }

    [DataContract]
    [DisplayName("String Date")]
    public class DateFromStringRequest
    {
        [DataMember(IsRequired = true)]
        public string DateString { get; set; }
    }

    [Description("Create a DateTime from a string")]
    public class CreateDateTimeFromString : Submit<DateFromStringRequest, DsspResponsePort<DateTimeResponse>>
    {
    }

    [DataContract]
    public class SunriseTimeRequest
    {
        [DataMember]
        public DateTime SunriseDate { get; set; }
    }

    [DisplayName("SunriseTime")]
    [Description("Returns the sunrise time for the date specified as input")]
    public class GetSunriseTime : Submit<SunriseTimeRequest, DsspResponsePort<DateTimeResponse>>
    {
    }

    [DataContract]
    public class SunsetTimeRequest
    {
        [DataMember]
        public DateTime SunsetDate { get; set; }
    }


    [DisplayName("SunsetTime")]
    [Description("Returns the sunset time for the date specified as input")]
    public class GetSunsetTime : Query<SunsetTimeRequest, DsspResponsePort<DateTimeResponse>>
    {
    }

    [DataContract]
    public class IsDaylightRequest
    {
    }

    [DataContract]
    public class IsDaylightResponse
    {
        [DataMember]
        public bool IsDaylight { get; set; }
    }

    [Description("Calculates whether the current time is between sunrise and sunset")]
    public class IsDaylight : Submit<IsDaylightRequest, DsspResponsePort<IsDaylightResponse>>
    {
    }

    #region Alarm Functions

    [DataContract]
    public class AlarmCompletedMessage
    {
        [DataMember]
        [DataMemberConstructor]
        public string Name { get; set; }

        [DataMember]
        [DataMemberConstructor]
        public DateTime AlarmDateTime { get; set; }
    }

    public class AlarmCompleted : Update<AlarmCompletedMessage, DsspResponsePort<DefaultUpdateResponseType>>
    {
    }

    [DataContract]
    public class SetAlarmRequest
    {
        [DataMember]
        [DataMemberConstructor]
        public string Name { get; set; }

        [DataMember(IsRequired = true)]
        [DataMemberConstructor]
        public DateTime AlarmDateTime { get; set; }
    }

    public class SetAlarm : Update<SetAlarmRequest, DsspResponsePort<DefaultUpdateResponseType>>
    {
    }

    [DataContract]
    public class DailyAlarmRequest
    {
        [DataMember]
        [DataMemberConstructor]
        public string Name { get; set; }

        [DataMember(IsRequired = true)]
        [DataMemberConstructor]
        public DateTime StartDate { get; set; }

        [DataMember(IsRequired = true)]
        [DataMemberConstructor]
        public DateTime EndDate { get; set; }

        [DataMember(IsRequired = true)]
        [DataMemberConstructor]
        public int Interval { get; set; }

        [DataMember(IsRequired = true)]
        [DataMemberConstructor]
        public DaysOfWeek DaysOfWeek { get; set; }
    }

    public class SetDailyAlarm : Update<DailyAlarmRequest, DsspResponsePort<DefaultUpdateResponseType>>
    {
    }


    [DataContract]
    public class WeeklyAlarmRequest
    {
        [DataMember]
        [DataMemberConstructor]
        public string Name { get; set; }

        [DataMember(IsRequired = true)]
        [DataMemberConstructor]
        public DateTime StartDate { get; set; }

        [DataMember(IsRequired = true)]
        [DataMemberConstructor]
        public DateTime EndDate { get; set; }

        [DataMember(IsRequired = true)]
        [DataMemberConstructor]
        public int Interval { get; set; }

        [DataMember(IsRequired = true)]
        [DataMemberConstructor]
        public DaysOfWeek DaysOfWeek { get; set; }
    }

    public class SetWeeklyAlarm : Update<WeeklyAlarmRequest, DsspResponsePort<DefaultUpdateResponseType>>
    {
    }

    [DataContract]
    public class SunriseMessage
    {
        [DataMember]
        public DateTime SunriseTime;
    }

    [Description("An automatic alarm that fires at sunrise")]
    public class Sunrise : Update<SunriseMessage, DsspResponsePort<DefaultUpdateResponseType>>
    {
        public Sunrise()
        {
        }

        public Sunrise(DateTime dt)
        {
            Body = new SunriseMessage { SunriseTime = dt };
        }
    }

    [DataContract]
    public class SunsetMessage
    {
        [DataMember]
        public DateTime SunsetTime;
    }

    [Description("An automatic alarm that fires at sunset")]
    public class Sunset : Update<SunsetMessage, DsspResponsePort<DefaultUpdateResponseType>>
    {
        public Sunset()
        {
        }

        public Sunset(DateTime dt)
        {
            Body = new SunsetMessage { SunsetTime = dt };
        }
    }
    #endregion
}

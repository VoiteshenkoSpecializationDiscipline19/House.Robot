//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="ElkDevices.Y2008.M04, Version=0.0.0.0, Culture=neutral, PublicKeyToken=c131bbd27e" +
    "23e9e8")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformElkDevices {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Robotics.Elk.ZoneSensor.Proxy.SensorState), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_Elk_ZoneSensor_Proxy_SensorState_TO_Robotics_Elk_ZoneSensor_SensorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Robotics.Elk.ZoneSensor.SensorState), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_Elk_ZoneSensor_SensorState_TO_Robotics_Elk_ZoneSensor_Proxy_SensorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Robotics.Elk.ZoneSensor.Proxy.TriggeredZoneData), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_Elk_ZoneSensor_Proxy_TriggeredZoneData_TO_Robotics_Elk_ZoneSensor_TriggeredZoneData));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Robotics.Elk.ZoneSensor.TriggeredZoneData), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_Elk_ZoneSensor_TriggeredZoneData_TO_Robotics_Elk_ZoneSensor_Proxy_TriggeredZoneData));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Robotics.Elk.ZoneSensor.Proxy.NormalZoneData), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_Elk_ZoneSensor_Proxy_NormalZoneData_TO_Robotics_Elk_ZoneSensor_NormalZoneData));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Robotics.Elk.ZoneSensor.NormalZoneData), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_Elk_ZoneSensor_NormalZoneData_TO_Robotics_Elk_ZoneSensor_Proxy_NormalZoneData));
        }
        
        public static object Robotics_Elk_ZoneSensor_Proxy_SensorState_TO_Robotics_Elk_ZoneSensor_SensorState(object transformFrom) {
            global::Robotics.Elk.ZoneSensor.SensorState target = new global::Robotics.Elk.ZoneSensor.SensorState();
            global::Robotics.Elk.ZoneSensor.Proxy.SensorState from = ((global::Robotics.Elk.ZoneSensor.Proxy.SensorState)(transformFrom));
            target.Id = from.Id;
            target.DisplayName = from.DisplayName;
            target.Status = ((global::Robotics.Elk.ZoneSensor.ZoneStatus)(((int)(from.Status))));
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Robotics_Elk_ZoneSensor_SensorState_TO_Robotics_Elk_ZoneSensor_Proxy_SensorState(object transformFrom) {
            global::Robotics.Elk.ZoneSensor.Proxy.SensorState target = new global::Robotics.Elk.ZoneSensor.Proxy.SensorState();
            global::Robotics.Elk.ZoneSensor.SensorState from = ((global::Robotics.Elk.ZoneSensor.SensorState)(transformFrom));
            target.Id = from.Id;
            target.DisplayName = from.DisplayName;
            target.Status = ((global::Robotics.Elk.ZoneSensor.Proxy.ZoneStatus)(((int)(from.Status))));
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Robotics_Elk_ZoneSensor_Proxy_TriggeredZoneData_TO_Robotics_Elk_ZoneSensor_TriggeredZoneData(object transformFrom) {
            global::Robotics.Elk.ZoneSensor.TriggeredZoneData target = new global::Robotics.Elk.ZoneSensor.TriggeredZoneData();
            global::Robotics.Elk.ZoneSensor.Proxy.TriggeredZoneData from = ((global::Robotics.Elk.ZoneSensor.Proxy.TriggeredZoneData)(transformFrom));
            target.DisplayName = from.DisplayName;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Robotics_Elk_ZoneSensor_TriggeredZoneData_TO_Robotics_Elk_ZoneSensor_Proxy_TriggeredZoneData(object transformFrom) {
            global::Robotics.Elk.ZoneSensor.Proxy.TriggeredZoneData target = new global::Robotics.Elk.ZoneSensor.Proxy.TriggeredZoneData();
            global::Robotics.Elk.ZoneSensor.TriggeredZoneData from = ((global::Robotics.Elk.ZoneSensor.TriggeredZoneData)(transformFrom));
            target.DisplayName = from.DisplayName;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Robotics_Elk_ZoneSensor_Proxy_NormalZoneData_TO_Robotics_Elk_ZoneSensor_NormalZoneData(object transformFrom) {
            global::Robotics.Elk.ZoneSensor.NormalZoneData target = new global::Robotics.Elk.ZoneSensor.NormalZoneData();
            global::Robotics.Elk.ZoneSensor.Proxy.NormalZoneData from = ((global::Robotics.Elk.ZoneSensor.Proxy.NormalZoneData)(transformFrom));
            target.DisplayName = from.DisplayName;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Robotics_Elk_ZoneSensor_NormalZoneData_TO_Robotics_Elk_ZoneSensor_Proxy_NormalZoneData(object transformFrom) {
            global::Robotics.Elk.ZoneSensor.Proxy.NormalZoneData target = new global::Robotics.Elk.ZoneSensor.Proxy.NormalZoneData();
            global::Robotics.Elk.ZoneSensor.NormalZoneData from = ((global::Robotics.Elk.ZoneSensor.NormalZoneData)(transformFrom));
            target.DisplayName = from.DisplayName;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
    }
}

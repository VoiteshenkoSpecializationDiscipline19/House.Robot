//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     DSS Runtime Version: 2.0.730.3
//     CLR Runtime Version: 2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using Microsoft.Ccr.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.Core.DsspHttp;
using Microsoft.Dss.ServiceModel.Dssp;
using System.Collections.Generic;



namespace Robotics.Elk
{


    /// <summary>
    /// Elk Contract class
    /// </summary>
    public sealed class Contract
    {
        /// <summary>
        /// The Dss Service contract
        /// </summary>
        [DataMember]
        public const String Identifier = "http://house.robot/2008/04/elk.html";
    }

    public static class ElkConstants
    {
        public const int MAX_ZONES = 208;
        public const int MAX_OUTPUTS = 208;
        public const int LONG_COMM_DELAY = 500;
        public const int SHORT_COMM_DELAY = 50;
    }

    /// <summary>
    /// The Elk state
    /// </summary>
    [DataContract]
    public class ElkState
    {
        public void Initialize()
        {
            Zones = new Zone[ElkConstants.MAX_ZONES];
            for (int i = 0; i < Zones.Length; i++)
                Zones[i] = new Zone();

            Outputs = new Output[ElkConstants.MAX_OUTPUTS];
            for (int i = 0; i < Outputs.Length; i++)
                Outputs[i] = new Output();

            LastZoneUpdated = new Zone();
            LastOutputUpdated = new Output();
        }

        [DataMember]
        [DataMemberConstructor(Order = 1)]
        public string HostName { get; set; }

        [DataMember]
        [DataMemberConstructor(Order = 2)]
        public int Port { get; set; }

        [DataMember]
        [Browsable(false)]
        public Zone[] Zones { get; set; }

        [DataMember]
        [Browsable(false)]
        public Output[] Outputs { get; set; }

        [DataMember]
        [Browsable(false)]
        public Zone LastZoneUpdated { get; set; }

        [DataMember]
        [Browsable(false)]
        public Output LastOutputUpdated { get; set; }
    }

    [DataContract]
    [Description("Output Status")]
    public enum OutputState : byte
    {
        Off,
        On
    }

    [DataContract]
    public class Output
    {
        [DataMember(XmlAttribute = true)]
        public byte Id { get; set; }

        [DataMember(XmlAttribute = true)]
        public OutputState State { get; set; }

        [DataMember(XmlAttribute = true)]
        public DateTime Timestamp { get; set; }
    }

    [DataContract]
    public class Zone
    {
        [DataMember(XmlAttribute = true)]
        public byte Id { get; set; }

        [DataMember(XmlAttribute = true)]
        public string Name { get; set; }

        [DataMember(XmlAttribute = true)]
        public ZoneState State { get; set; }

        [DataMember(XmlAttribute = true)]
        public DateTime Timestamp { get; set; }
    }

    [DataContract]
    [Description("Zone State")]
    public enum ZoneState : byte
    {
        NormalUnconfigured,
        NormalOpen,
        NormalEOL,
        NormalShort,
        notused1,
        TroubleOpen,
        TroubleEOL,
        TroubleShort,
        notused2,
        ViolatedOpen,
        ViolatedEOL,
        ViolatedShort,
        notused3,
        BypassedOpen,
        BypassedEOL,
        BypassedShort
    }


    /// <summary>
    /// Elk Main Operations Port
    /// </summary>
    [ServicePort]
    public class ElkOperations : PortSet<
        DsspDefaultLookup,
        DsspDefaultDrop,
        Get,
        HttpGet,
        FilteredSubscribe, // Make sure this comes before subscribe.
        Subscribe,
        ReplaceZones,
        ZoneChanged,
        ReplaceOutputs,
        OutputChanged,
        UpdateTask
        >
    {
    }


    /// <summary>
    /// Elk Get Operation
    /// </summary>
    public class Get : Get<GetRequestType, DsspResponsePort<ElkState>>
    {
        /// <summary>
        /// Elk Get Operation
        /// </summary>
        public Get()
        {
        }

        /// <summary>
        /// Elk Get Operation
        /// </summary>
        public Get(GetRequestType body) :
            base(body)
        {
        }

        /// <summary>
        /// Elk Get Operation
        /// </summary>
        public Get(GetRequestType body, DsspResponsePort<ElkState> responsePort) :
            base(body, responsePort)
        {
        }
    }

    public class Subscribe : Subscribe<SubscribeRequestType, DsspResponsePort<SubscribeResponseType>>
    {
        public Subscribe()
        {
        }

        public Subscribe(SubscribeRequestType body)
            : base(body)
        {
        }
    }

    /// <summary>
    /// Body of filtered subscription that allows for simple key/value filtering.
    /// </summary>
    [DataContract]
    public class FilteredSubscribeRequest : SubscribeRequestType
    {
        [DataMember]
        [DataMemberConstructor]
        public int[] Zones; //TODO: Could make this generic "device ids" and use it for outputs, tasks, etc.

        public FilteredSubscribeRequest(int[] ints)
        {
            Zones = ints;
        }

        public FilteredSubscribeRequest()
        {
            // Nothing.
        }
    }

    public class FilteredSubscribe : Subscribe<FilteredSubscribeRequest, DsspResponsePort<SubscribeResponseType>>
    {
    }

    [DataContract]
    public class ReplaceZonesRequest
    {
        [DataMember]
        public Zone[] Zones;
    }

    public class ReplaceZones : Replace<ReplaceZonesRequest, DsspResponsePort<DefaultReplaceResponseType>>
    {
    }


    [DataContract]
    [Description("ID and State of a zone")]
    public class ZoneChangedData
    {
        [DataMember]
        public byte Id;

        [DataMember]
        public ZoneState State;

        [DataMember]
        public DateTime Timestamp;
    }


    /// <summary>
    /// Update Elk zone status
    /// </summary>
    [DataContract]
    [Description("Notification of single zone status change")]
    public class ZoneChanged : Update<ZoneChangedData, DsspResponsePort<DefaultUpdateResponseType>>
    {
        public ZoneChanged()
            : base()
        {

        }

        public ZoneChanged(byte id, ZoneState state)
            : base(new ZoneChangedData { Id = id, State = state, Timestamp = DateTime.Now })
        {
        }

        public ZoneChanged(byte id, ZoneState state, DateTime timestamp)
            : base(new ZoneChangedData { Id = id, State = state, Timestamp = timestamp })
        {

        }
    }


    [DataContract]
    public class ReplaceOutputData
    {
        [DataMember]
        public Output[] Outputs;
    }

    public class ReplaceOutputs : Replace<ReplaceOutputData, DsspResponsePort<DefaultReplaceResponseType>>
    {
    }

    [DataContract]
    [Description("TODO")]
    public class OutputChangedData
    {
        [DataMember]
        public byte Id;

        [DataMember]
        public OutputState State;

        [DataMember]
        public DateTime Timestamp;
    }

    public class OutputChanged : Update<OutputChangedData, DsspResponsePort<DefaultUpdateResponseType>>
    {
        public OutputChanged()
            : base()
        {
        }

        public OutputChanged(byte id, OutputState state)
            : base(new OutputChangedData { Id = id, State = state, Timestamp = DateTime.Now })
        {
        }

        public OutputChanged(byte id, OutputState state, DateTime timestamp)
            : base(new OutputChangedData { Id = id, State = state, Timestamp = timestamp })
        {
        }
    }

    [DataContract]
    [Description("Activate an Elk Task")]
    public class UpdateTaskRequest
    {
        [DataMember]
        public byte TaskId;
    }

    public class UpdateTask : Update<UpdateTaskRequest, DsspResponsePort<DefaultUpdateResponseType>>
    {
        public UpdateTask()
            : base()
        {
        }

        public UpdateTask(byte taskId)
            : base(new UpdateTaskRequest { TaskId = taskId })
        {
        }
    }

    public enum TextType
    {
        ZoneName,
        AreaName,
        UserName,
        KeypadName,
        OutputName,
        TaskName,
        TelephoneName,
        LightName,
        AlarmDurationName,
        CustomSettings,
        CountersNames,
        ThermostatNames,
        FunctionKey1Name,
        FunctionKey2Name,
        FunctionKey3Name,
        FunctionKey4Name,
        FunctionKey5Name,
        FunctionKey6Name,
        AudioZoneName,
        AudioSourceName,
    };

    [DataContract]
    public class StringName
    {
        public TextType TextType { get; set; }
        public byte Id { get; set; }
        public string Name { get; set; }
    }

    public class UpdateName : Update<StringName, DsspResponsePort<DefaultUpdateResponseType>>
    {
    }
}

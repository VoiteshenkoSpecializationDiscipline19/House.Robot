//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="ElkService.Y2008.M04, Version=0.0.0.0, Culture=neutral, PublicKeyToken=d08de22851" +
    "75fb3a")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Robotics.Elk.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://house.robot/2008/04/elk.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://house.robot/2008/04/elk.html", ElementName="ElkState")]
    public class ElkState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ElkState() {
        }
        
        public ElkState(string hostName, int port) {
            this._HostName = hostName;
            this._Port = port;
        }
        
        private string _HostName;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string HostName {
            get {
                return this._HostName;
            }
            set {
                this._HostName = value;
            }
        }
        
        private int _Port;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int Port {
            get {
                return this._Port;
            }
            set {
                this._Port = value;
            }
        }
        
        private Robotics.Elk.Proxy.Zone[] _Zones;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public Robotics.Elk.Proxy.Zone[] Zones {
            get {
                return this._Zones;
            }
            set {
                this._Zones = value;
            }
        }
        
        private Robotics.Elk.Proxy.Output[] _Outputs;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public Robotics.Elk.Proxy.Output[] Outputs {
            get {
                return this._Outputs;
            }
            set {
                this._Outputs = value;
            }
        }
        
        private global::Robotics.Elk.Proxy.Zone _LastZoneUpdated;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Robotics.Elk.Proxy.Zone LastZoneUpdated {
            get {
                return this._LastZoneUpdated;
            }
            set {
                this._LastZoneUpdated = value;
            }
        }
        
        private global::Robotics.Elk.Proxy.Output _LastOutputUpdated;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Robotics.Elk.Proxy.Output LastOutputUpdated {
            get {
                return this._LastOutputUpdated;
            }
            set {
                this._LastOutputUpdated = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ElkState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.Elk.Proxy.ElkState typedTarget = ((global::Robotics.Elk.Proxy.ElkState)(target));
            typedTarget._HostName = this._HostName;
            typedTarget._Port = this._Port;
            if ((this._Zones != null)) {
                int count = this._Zones.Length;
                global::Robotics.Elk.Proxy.Zone[] tmp = new global::Robotics.Elk.Proxy.Zone[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Robotics.Elk.Proxy.Zone tmp0 = default(global::Robotics.Elk.Proxy.Zone);
                    if ((this._Zones[index] != null)) {
                        global::Robotics.Elk.Proxy.Zone tmp1 = new global::Robotics.Elk.Proxy.Zone();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Zones[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp[index] = tmp0;
                }
                typedTarget._Zones = tmp;
            }
            if ((this._Outputs != null)) {
                int count0 = this._Outputs.Length;
                global::Robotics.Elk.Proxy.Output[] tmp2 = new global::Robotics.Elk.Proxy.Output[count0];
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    global::Robotics.Elk.Proxy.Output tmp3 = default(global::Robotics.Elk.Proxy.Output);
                    if ((this._Outputs[index0] != null)) {
                        global::Robotics.Elk.Proxy.Output tmp4 = new global::Robotics.Elk.Proxy.Output();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Outputs[index0])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp4)));
                        tmp3 = tmp4;
                    }
                    tmp2[index0] = tmp3;
                }
                typedTarget._Outputs = tmp2;
            }
            if ((this._LastZoneUpdated != null)) {
                global::Robotics.Elk.Proxy.Zone tmp5 = new global::Robotics.Elk.Proxy.Zone();
                ((Microsoft.Dss.Core.IDssSerializable)(this._LastZoneUpdated)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp5)));
                typedTarget._LastZoneUpdated = tmp5;
            }
            if ((this._LastOutputUpdated != null)) {
                global::Robotics.Elk.Proxy.Output tmp6 = new global::Robotics.Elk.Proxy.Output();
                ((Microsoft.Dss.Core.IDssSerializable)(this._LastOutputUpdated)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp6)));
                typedTarget._LastOutputUpdated = tmp6;
            }
        }
        
        /// <summary>
        ///Clones ElkState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.Elk.Proxy.ElkState target0 = new global::Robotics.Elk.Proxy.ElkState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ElkState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._HostName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._HostName);
            }
            writer.Write(this._Port);
            if ((this._Zones == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._Zones.Length);
                for (int indexZones = 0; (indexZones < this._Zones.Length); indexZones = (indexZones + 1)) {
                    if ((this._Zones[indexZones] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Zones[indexZones])).Serialize(writer);
                    }
                }
            }
            if ((this._Outputs == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._Outputs.Length);
                for (int indexOutputs = 0; (indexOutputs < this._Outputs.Length); indexOutputs = (indexOutputs + 1)) {
                    if ((this._Outputs[indexOutputs] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Outputs[indexOutputs])).Serialize(writer);
                    }
                }
            }
            if ((this._LastZoneUpdated == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._LastZoneUpdated)).Serialize(writer);
            }
            if ((this._LastOutputUpdated == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._LastOutputUpdated)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes ElkState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ElkState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._HostName = reader.ReadString();
            }
            this._Port = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                int tmp7 = reader.ReadInt32();
                int count1 = reader.ReadInt32();
                this._Zones = new global::Robotics.Elk.Proxy.Zone[count1];
                for (int index1 = 0; (index1 < count1); index1 = (index1 + 1)) {
                    if ((reader.ReadByte() != 0)) {
                        this._Zones[index1] = ((global::Robotics.Elk.Proxy.Zone)(((Microsoft.Dss.Core.IDssSerializable)(new global::Robotics.Elk.Proxy.Zone())).Deserialize(reader)));
                    }
                }
            }
            if ((reader.ReadByte() != 0)) {
                int tmp8 = reader.ReadInt32();
                int count2 = reader.ReadInt32();
                this._Outputs = new global::Robotics.Elk.Proxy.Output[count2];
                for (int index2 = 0; (index2 < count2); index2 = (index2 + 1)) {
                    if ((reader.ReadByte() != 0)) {
                        this._Outputs[index2] = ((global::Robotics.Elk.Proxy.Output)(((Microsoft.Dss.Core.IDssSerializable)(new global::Robotics.Elk.Proxy.Output())).Deserialize(reader)));
                    }
                }
            }
            if ((reader.ReadByte() != 0)) {
                this._LastZoneUpdated = ((global::Robotics.Elk.Proxy.Zone)(((Microsoft.Dss.Core.IDssSerializable)(new global::Robotics.Elk.Proxy.Zone())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._LastOutputUpdated = ((global::Robotics.Elk.Proxy.Output)(((Microsoft.Dss.Core.IDssSerializable)(new global::Robotics.Elk.Proxy.Output())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://house.robot/2008/04/elk.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://house.robot/2008/04/elk.html", ElementName="Zone")]
    public class Zone : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Zone() {
        }
        
        private byte _Id;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1, XmlAttribute=true)]
        [global::System.Xml.Serialization.XmlAttributeAttribute()]
        public byte Id {
            get {
                return this._Id;
            }
            set {
                this._Id = value;
            }
        }
        
        private string _Name;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1, XmlAttribute=true)]
        [global::System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Robotics.Elk.Proxy.ZoneState _State;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1, XmlAttribute=true)]
        [global::System.Xml.Serialization.XmlAttributeAttribute()]
        public global::Robotics.Elk.Proxy.ZoneState State {
            get {
                return this._State;
            }
            set {
                this._State = value;
            }
        }
        
        private global::System.DateTime _Timestamp;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1, XmlAttribute=true)]
        [global::System.Xml.Serialization.XmlAttributeAttribute()]
        public global::System.DateTime Timestamp {
            get {
                return this._Timestamp;
            }
            set {
                this._Timestamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Zone to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.Elk.Proxy.Zone typedTarget = ((global::Robotics.Elk.Proxy.Zone)(target));
            typedTarget._Id = this._Id;
            typedTarget._Name = this._Name;
            typedTarget._State = this._State;
            typedTarget._Timestamp = this._Timestamp;
        }
        
        /// <summary>
        ///Clones Zone
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.Elk.Proxy.Zone target0 = new global::Robotics.Elk.Proxy.Zone();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Zone to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Id);
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((byte)(this._State)));
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._Timestamp, writer);
        }
        
        /// <summary>
        ///Deserializes Zone
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Zone</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Id = reader.ReadByte();
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._State = ((global::Robotics.Elk.Proxy.ZoneState)(reader.ReadByte()));
            this._Timestamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://house.robot/2008/04/elk.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://house.robot/2008/04/elk.html", ElementName="Output")]
    public class Output : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Output() {
        }
        
        private byte _Id;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1, XmlAttribute=true)]
        [global::System.Xml.Serialization.XmlAttributeAttribute()]
        public byte Id {
            get {
                return this._Id;
            }
            set {
                this._Id = value;
            }
        }
        
        private global::Robotics.Elk.Proxy.OutputState _State;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1, XmlAttribute=true)]
        [global::System.Xml.Serialization.XmlAttributeAttribute()]
        public global::Robotics.Elk.Proxy.OutputState State {
            get {
                return this._State;
            }
            set {
                this._State = value;
            }
        }
        
        private global::System.DateTime _Timestamp;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1, XmlAttribute=true)]
        [global::System.Xml.Serialization.XmlAttributeAttribute()]
        public global::System.DateTime Timestamp {
            get {
                return this._Timestamp;
            }
            set {
                this._Timestamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Output to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.Elk.Proxy.Output typedTarget = ((global::Robotics.Elk.Proxy.Output)(target));
            typedTarget._Id = this._Id;
            typedTarget._State = this._State;
            typedTarget._Timestamp = this._Timestamp;
        }
        
        /// <summary>
        ///Clones Output
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.Elk.Proxy.Output target0 = new global::Robotics.Elk.Proxy.Output();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Output to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Id);
            writer.Write(((byte)(this._State)));
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._Timestamp, writer);
        }
        
        /// <summary>
        ///Deserializes Output
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Output</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Id = reader.ReadByte();
            this._State = ((global::Robotics.Elk.Proxy.OutputState)(reader.ReadByte()));
            this._Timestamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://house.robot/2008/04/elk.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://house.robot/2008/04/elk.html", ElementName="FilteredSubscribeRequest")]
    public class FilteredSubscribeRequest : global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public FilteredSubscribeRequest() {
        }
        
        public FilteredSubscribeRequest(int[] zones) {
            this._Zones = zones;
        }
        
        private int[] _Zones;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int[] Zones {
            get {
                return this._Zones;
            }
            set {
                this._Zones = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current FilteredSubscribeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Robotics.Elk.Proxy.FilteredSubscribeRequest typedTarget = ((global::Robotics.Elk.Proxy.FilteredSubscribeRequest)(target));
            if ((this._Zones != null)) {
                int count = this._Zones.Length;
                int[] tmp = new int[count];
                global::System.Buffer.BlockCopy(this._Zones, 0, tmp, 0, global::System.Buffer.ByteLength(this._Zones));
                typedTarget._Zones = tmp;
            }
        }
        
        /// <summary>
        ///Clones FilteredSubscribeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Robotics.Elk.Proxy.FilteredSubscribeRequest target0 = new global::Robotics.Elk.Proxy.FilteredSubscribeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current FilteredSubscribeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            if ((this._Zones == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._Zones.Length);
                for (int indexZones = 0; (indexZones < this._Zones.Length); indexZones = (indexZones + 1)) {
                    writer.Write(this._Zones[indexZones]);
                }
            }
        }
        
        /// <summary>
        ///Deserializes FilteredSubscribeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized FilteredSubscribeRequest</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            if ((reader.ReadByte() != 0)) {
                int tmp0 = reader.ReadInt32();
                int count0 = reader.ReadInt32();
                this._Zones = new int[count0];
                for (int index = 0; (index < count0); index = (index + 1)) {
                    this._Zones[index] = reader.ReadInt32();
                }
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://house.robot/2008/04/elk.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://house.robot/2008/04/elk.html", ElementName="ReplaceZonesRequest")]
    public class ReplaceZonesRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReplaceZonesRequest() {
        }
        
        private Robotics.Elk.Proxy.Zone[] _Zones;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public Robotics.Elk.Proxy.Zone[] Zones {
            get {
                return this._Zones;
            }
            set {
                this._Zones = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReplaceZonesRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.Elk.Proxy.ReplaceZonesRequest typedTarget = ((global::Robotics.Elk.Proxy.ReplaceZonesRequest)(target));
            if ((this._Zones != null)) {
                int count = this._Zones.Length;
                global::Robotics.Elk.Proxy.Zone[] tmp = new global::Robotics.Elk.Proxy.Zone[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Robotics.Elk.Proxy.Zone tmp0 = default(global::Robotics.Elk.Proxy.Zone);
                    if ((this._Zones[index] != null)) {
                        global::Robotics.Elk.Proxy.Zone tmp1 = new global::Robotics.Elk.Proxy.Zone();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Zones[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp[index] = tmp0;
                }
                typedTarget._Zones = tmp;
            }
        }
        
        /// <summary>
        ///Clones ReplaceZonesRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.Elk.Proxy.ReplaceZonesRequest target0 = new global::Robotics.Elk.Proxy.ReplaceZonesRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReplaceZonesRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Zones == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._Zones.Length);
                for (int indexZones = 0; (indexZones < this._Zones.Length); indexZones = (indexZones + 1)) {
                    if ((this._Zones[indexZones] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Zones[indexZones])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes ReplaceZonesRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReplaceZonesRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int tmp2 = reader.ReadInt32();
                int count0 = reader.ReadInt32();
                this._Zones = new global::Robotics.Elk.Proxy.Zone[count0];
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    if ((reader.ReadByte() != 0)) {
                        this._Zones[index0] = ((global::Robotics.Elk.Proxy.Zone)(((Microsoft.Dss.Core.IDssSerializable)(new global::Robotics.Elk.Proxy.Zone())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://house.robot/2008/04/elk.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://house.robot/2008/04/elk.html", ElementName="ZoneChangedData")]
    [global::System.ComponentModel.DescriptionAttribute("ID and State of a zone")]
    public class ZoneChangedData : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ZoneChangedData() {
        }
        
        private byte _Id;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte Id {
            get {
                return this._Id;
            }
            set {
                this._Id = value;
            }
        }
        
        private global::Robotics.Elk.Proxy.ZoneState _State;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Robotics.Elk.Proxy.ZoneState State {
            get {
                return this._State;
            }
            set {
                this._State = value;
            }
        }
        
        private global::System.DateTime _Timestamp;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.DateTime Timestamp {
            get {
                return this._Timestamp;
            }
            set {
                this._Timestamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ZoneChangedData to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.Elk.Proxy.ZoneChangedData typedTarget = ((global::Robotics.Elk.Proxy.ZoneChangedData)(target));
            typedTarget._Id = this._Id;
            typedTarget._State = this._State;
            typedTarget._Timestamp = this._Timestamp;
        }
        
        /// <summary>
        ///Clones ZoneChangedData
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.Elk.Proxy.ZoneChangedData target0 = new global::Robotics.Elk.Proxy.ZoneChangedData();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ZoneChangedData to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Id);
            writer.Write(((byte)(this._State)));
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._Timestamp, writer);
        }
        
        /// <summary>
        ///Deserializes ZoneChangedData
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ZoneChangedData</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Id = reader.ReadByte();
            this._State = ((global::Robotics.Elk.Proxy.ZoneState)(reader.ReadByte()));
            this._Timestamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://house.robot/2008/04/elk.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://house.robot/2008/04/elk.html", ElementName="ReplaceOutputData")]
    public class ReplaceOutputData : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReplaceOutputData() {
        }
        
        private Robotics.Elk.Proxy.Output[] _Outputs;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public Robotics.Elk.Proxy.Output[] Outputs {
            get {
                return this._Outputs;
            }
            set {
                this._Outputs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReplaceOutputData to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.Elk.Proxy.ReplaceOutputData typedTarget = ((global::Robotics.Elk.Proxy.ReplaceOutputData)(target));
            if ((this._Outputs != null)) {
                int count = this._Outputs.Length;
                global::Robotics.Elk.Proxy.Output[] tmp = new global::Robotics.Elk.Proxy.Output[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Robotics.Elk.Proxy.Output tmp0 = default(global::Robotics.Elk.Proxy.Output);
                    if ((this._Outputs[index] != null)) {
                        global::Robotics.Elk.Proxy.Output tmp1 = new global::Robotics.Elk.Proxy.Output();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Outputs[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp[index] = tmp0;
                }
                typedTarget._Outputs = tmp;
            }
        }
        
        /// <summary>
        ///Clones ReplaceOutputData
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.Elk.Proxy.ReplaceOutputData target0 = new global::Robotics.Elk.Proxy.ReplaceOutputData();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReplaceOutputData to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Outputs == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._Outputs.Length);
                for (int indexOutputs = 0; (indexOutputs < this._Outputs.Length); indexOutputs = (indexOutputs + 1)) {
                    if ((this._Outputs[indexOutputs] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Outputs[indexOutputs])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes ReplaceOutputData
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReplaceOutputData</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int tmp2 = reader.ReadInt32();
                int count0 = reader.ReadInt32();
                this._Outputs = new global::Robotics.Elk.Proxy.Output[count0];
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    if ((reader.ReadByte() != 0)) {
                        this._Outputs[index0] = ((global::Robotics.Elk.Proxy.Output)(((Microsoft.Dss.Core.IDssSerializable)(new global::Robotics.Elk.Proxy.Output())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://house.robot/2008/04/elk.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://house.robot/2008/04/elk.html", ElementName="OutputChangedData")]
    [global::System.ComponentModel.DescriptionAttribute("TODO")]
    public class OutputChangedData : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public OutputChangedData() {
        }
        
        private byte _Id;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte Id {
            get {
                return this._Id;
            }
            set {
                this._Id = value;
            }
        }
        
        private global::Robotics.Elk.Proxy.OutputState _State;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Robotics.Elk.Proxy.OutputState State {
            get {
                return this._State;
            }
            set {
                this._State = value;
            }
        }
        
        private global::System.DateTime _Timestamp;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.DateTime Timestamp {
            get {
                return this._Timestamp;
            }
            set {
                this._Timestamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current OutputChangedData to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.Elk.Proxy.OutputChangedData typedTarget = ((global::Robotics.Elk.Proxy.OutputChangedData)(target));
            typedTarget._Id = this._Id;
            typedTarget._State = this._State;
            typedTarget._Timestamp = this._Timestamp;
        }
        
        /// <summary>
        ///Clones OutputChangedData
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.Elk.Proxy.OutputChangedData target0 = new global::Robotics.Elk.Proxy.OutputChangedData();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current OutputChangedData to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Id);
            writer.Write(((byte)(this._State)));
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._Timestamp, writer);
        }
        
        /// <summary>
        ///Deserializes OutputChangedData
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized OutputChangedData</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Id = reader.ReadByte();
            this._State = ((global::Robotics.Elk.Proxy.OutputState)(reader.ReadByte()));
            this._Timestamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://house.robot/2008/04/elk.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://house.robot/2008/04/elk.html", ElementName="UpdateTaskRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Activate an Elk Task")]
    public class UpdateTaskRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public UpdateTaskRequest() {
        }
        
        private byte _TaskId;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte TaskId {
            get {
                return this._TaskId;
            }
            set {
                this._TaskId = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current UpdateTaskRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.Elk.Proxy.UpdateTaskRequest typedTarget = ((global::Robotics.Elk.Proxy.UpdateTaskRequest)(target));
            typedTarget._TaskId = this._TaskId;
        }
        
        /// <summary>
        ///Clones UpdateTaskRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.Elk.Proxy.UpdateTaskRequest target0 = new global::Robotics.Elk.Proxy.UpdateTaskRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current UpdateTaskRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._TaskId);
        }
        
        /// <summary>
        ///Deserializes UpdateTaskRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized UpdateTaskRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TaskId = reader.ReadByte();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://house.robot/2008/04/elk.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://house.robot/2008/04/elk.html", ElementName="StringName")]
    public class StringName : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public StringName() {
        }
        
        /// <summary>
        ///Copies the data member values of the current StringName to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.Elk.Proxy.StringName typedTarget = ((global::Robotics.Elk.Proxy.StringName)(target));
        }
        
        /// <summary>
        ///Clones StringName
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.Elk.Proxy.StringName target0 = new global::Robotics.Elk.Proxy.StringName();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current StringName to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes StringName
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized StringName</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.Elk.Proxy.ElkState>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.Elk.Proxy.ElkState> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class FilteredSubscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Robotics.Elk.Proxy.FilteredSubscribeRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType>> {
        
        public FilteredSubscribe() {
        }
        
        public FilteredSubscribe(global::Robotics.Elk.Proxy.FilteredSubscribeRequest body) : 
                base(body) {
        }
        
        public FilteredSubscribe(global::Robotics.Elk.Proxy.FilteredSubscribeRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ReplaceZones : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Robotics.Elk.Proxy.ReplaceZonesRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType>> {
        
        public ReplaceZones() {
        }
        
        public ReplaceZones(global::Robotics.Elk.Proxy.ReplaceZonesRequest body) : 
                base(body) {
        }
        
        public ReplaceZones(global::Robotics.Elk.Proxy.ReplaceZonesRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Notification of single zone status change")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ZoneChanged : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Robotics.Elk.Proxy.ZoneChangedData, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public ZoneChanged() {
        }
        
        public ZoneChanged(global::Robotics.Elk.Proxy.ZoneChangedData body) : 
                base(body) {
        }
        
        public ZoneChanged(global::Robotics.Elk.Proxy.ZoneChangedData body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ReplaceOutputs : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Robotics.Elk.Proxy.ReplaceOutputData, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType>> {
        
        public ReplaceOutputs() {
        }
        
        public ReplaceOutputs(global::Robotics.Elk.Proxy.ReplaceOutputData body) : 
                base(body) {
        }
        
        public ReplaceOutputs(global::Robotics.Elk.Proxy.ReplaceOutputData body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class OutputChanged : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Robotics.Elk.Proxy.OutputChangedData, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public OutputChanged() {
        }
        
        public OutputChanged(global::Robotics.Elk.Proxy.OutputChangedData body) : 
                base(body) {
        }
        
        public OutputChanged(global::Robotics.Elk.Proxy.OutputChangedData body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateTask : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Robotics.Elk.Proxy.UpdateTaskRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateTask() {
        }
        
        public UpdateTask(global::Robotics.Elk.Proxy.UpdateTaskRequest body) : 
                base(body) {
        }
        
        public UpdateTask(global::Robotics.Elk.Proxy.UpdateTaskRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ElkOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Robotics.Elk.Proxy.Get, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Robotics.Elk.Proxy.FilteredSubscribe, global:: Robotics.Elk.Proxy.Subscribe, global:: Robotics.Elk.Proxy.ReplaceZones, global:: Robotics.Elk.Proxy.ZoneChanged, global:: Robotics.Elk.Proxy.ReplaceOutputs, global:: Robotics.Elk.Proxy.OutputChanged, global:: Robotics.Elk.Proxy.UpdateTask> {
        
        public ElkOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.Elk.Proxy.ElkState> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Robotics.Elk.Proxy.Get operation = new global::Robotics.Elk.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Robotics.Elk.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Robotics.Elk.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.Elk.Proxy.ElkState> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Robotics.Elk.Proxy.Get operation = new global::Robotics.Elk.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Robotics.Elk.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Robotics.Elk.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> FilteredSubscribe(int[] zones, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Robotics.Elk.Proxy.FilteredSubscribeRequest body = new global::Robotics.Elk.Proxy.FilteredSubscribeRequest(zones);
            global::Robotics.Elk.Proxy.FilteredSubscribe operation = new global::Robotics.Elk.Proxy.FilteredSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice FilteredSubscribe(int[] zones, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Robotics.Elk.Proxy.FilteredSubscribe operation, params System.Type[] types) {
            global::Robotics.Elk.Proxy.FilteredSubscribeRequest body = new global::Robotics.Elk.Proxy.FilteredSubscribeRequest(zones);
            operation = new global::Robotics.Elk.Proxy.FilteredSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> FilteredSubscribe(global::Robotics.Elk.Proxy.FilteredSubscribeRequest body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Robotics.Elk.Proxy.FilteredSubscribeRequest();
            }
            global::Robotics.Elk.Proxy.FilteredSubscribe operation = new global::Robotics.Elk.Proxy.FilteredSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice FilteredSubscribe(global::Robotics.Elk.Proxy.FilteredSubscribeRequest body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Robotics.Elk.Proxy.FilteredSubscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Robotics.Elk.Proxy.FilteredSubscribeRequest();
            }
            operation = new global::Robotics.Elk.Proxy.FilteredSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Robotics.Elk.Proxy.Subscribe operation = new global::Robotics.Elk.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Robotics.Elk.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Robotics.Elk.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Robotics.Elk.Proxy.Subscribe operation = new global::Robotics.Elk.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Robotics.Elk.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Robotics.Elk.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> ReplaceZones() {
            global::Robotics.Elk.Proxy.ReplaceZonesRequest body = new global::Robotics.Elk.Proxy.ReplaceZonesRequest();
            global::Robotics.Elk.Proxy.ReplaceZones operation = new global::Robotics.Elk.Proxy.ReplaceZones(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReplaceZones(out global::Robotics.Elk.Proxy.ReplaceZones operation) {
            global::Robotics.Elk.Proxy.ReplaceZonesRequest body = new global::Robotics.Elk.Proxy.ReplaceZonesRequest();
            operation = new global::Robotics.Elk.Proxy.ReplaceZones(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> ReplaceZones(global::Robotics.Elk.Proxy.ReplaceZonesRequest body) {
            if ((body == null)) {
                body = new global::Robotics.Elk.Proxy.ReplaceZonesRequest();
            }
            global::Robotics.Elk.Proxy.ReplaceZones operation = new global::Robotics.Elk.Proxy.ReplaceZones(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReplaceZones(global::Robotics.Elk.Proxy.ReplaceZonesRequest body, out global::Robotics.Elk.Proxy.ReplaceZones operation) {
            if ((body == null)) {
                body = new global::Robotics.Elk.Proxy.ReplaceZonesRequest();
            }
            operation = new global::Robotics.Elk.Proxy.ReplaceZones(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> ZoneChanged() {
            global::Robotics.Elk.Proxy.ZoneChangedData body = new global::Robotics.Elk.Proxy.ZoneChangedData();
            global::Robotics.Elk.Proxy.ZoneChanged operation = new global::Robotics.Elk.Proxy.ZoneChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ZoneChanged(out global::Robotics.Elk.Proxy.ZoneChanged operation) {
            global::Robotics.Elk.Proxy.ZoneChangedData body = new global::Robotics.Elk.Proxy.ZoneChangedData();
            operation = new global::Robotics.Elk.Proxy.ZoneChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> ZoneChanged(global::Robotics.Elk.Proxy.ZoneChangedData body) {
            if ((body == null)) {
                body = new global::Robotics.Elk.Proxy.ZoneChangedData();
            }
            global::Robotics.Elk.Proxy.ZoneChanged operation = new global::Robotics.Elk.Proxy.ZoneChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ZoneChanged(global::Robotics.Elk.Proxy.ZoneChangedData body, out global::Robotics.Elk.Proxy.ZoneChanged operation) {
            if ((body == null)) {
                body = new global::Robotics.Elk.Proxy.ZoneChangedData();
            }
            operation = new global::Robotics.Elk.Proxy.ZoneChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> ReplaceOutputs() {
            global::Robotics.Elk.Proxy.ReplaceOutputData body = new global::Robotics.Elk.Proxy.ReplaceOutputData();
            global::Robotics.Elk.Proxy.ReplaceOutputs operation = new global::Robotics.Elk.Proxy.ReplaceOutputs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReplaceOutputs(out global::Robotics.Elk.Proxy.ReplaceOutputs operation) {
            global::Robotics.Elk.Proxy.ReplaceOutputData body = new global::Robotics.Elk.Proxy.ReplaceOutputData();
            operation = new global::Robotics.Elk.Proxy.ReplaceOutputs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> ReplaceOutputs(global::Robotics.Elk.Proxy.ReplaceOutputData body) {
            if ((body == null)) {
                body = new global::Robotics.Elk.Proxy.ReplaceOutputData();
            }
            global::Robotics.Elk.Proxy.ReplaceOutputs operation = new global::Robotics.Elk.Proxy.ReplaceOutputs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReplaceOutputs(global::Robotics.Elk.Proxy.ReplaceOutputData body, out global::Robotics.Elk.Proxy.ReplaceOutputs operation) {
            if ((body == null)) {
                body = new global::Robotics.Elk.Proxy.ReplaceOutputData();
            }
            operation = new global::Robotics.Elk.Proxy.ReplaceOutputs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> OutputChanged() {
            global::Robotics.Elk.Proxy.OutputChangedData body = new global::Robotics.Elk.Proxy.OutputChangedData();
            global::Robotics.Elk.Proxy.OutputChanged operation = new global::Robotics.Elk.Proxy.OutputChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice OutputChanged(out global::Robotics.Elk.Proxy.OutputChanged operation) {
            global::Robotics.Elk.Proxy.OutputChangedData body = new global::Robotics.Elk.Proxy.OutputChangedData();
            operation = new global::Robotics.Elk.Proxy.OutputChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> OutputChanged(global::Robotics.Elk.Proxy.OutputChangedData body) {
            if ((body == null)) {
                body = new global::Robotics.Elk.Proxy.OutputChangedData();
            }
            global::Robotics.Elk.Proxy.OutputChanged operation = new global::Robotics.Elk.Proxy.OutputChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice OutputChanged(global::Robotics.Elk.Proxy.OutputChangedData body, out global::Robotics.Elk.Proxy.OutputChanged operation) {
            if ((body == null)) {
                body = new global::Robotics.Elk.Proxy.OutputChangedData();
            }
            operation = new global::Robotics.Elk.Proxy.OutputChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateTask() {
            global::Robotics.Elk.Proxy.UpdateTaskRequest body = new global::Robotics.Elk.Proxy.UpdateTaskRequest();
            global::Robotics.Elk.Proxy.UpdateTask operation = new global::Robotics.Elk.Proxy.UpdateTask(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateTask(out global::Robotics.Elk.Proxy.UpdateTask operation) {
            global::Robotics.Elk.Proxy.UpdateTaskRequest body = new global::Robotics.Elk.Proxy.UpdateTaskRequest();
            operation = new global::Robotics.Elk.Proxy.UpdateTask(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateTask(global::Robotics.Elk.Proxy.UpdateTaskRequest body) {
            if ((body == null)) {
                body = new global::Robotics.Elk.Proxy.UpdateTaskRequest();
            }
            global::Robotics.Elk.Proxy.UpdateTask operation = new global::Robotics.Elk.Proxy.UpdateTask(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateTask(global::Robotics.Elk.Proxy.UpdateTaskRequest body, out global::Robotics.Elk.Proxy.UpdateTask operation) {
            if ((body == null)) {
                body = new global::Robotics.Elk.Proxy.UpdateTaskRequest();
            }
            operation = new global::Robotics.Elk.Proxy.UpdateTask(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://house.robot/2008/04/elk.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://house.robot/2008/04/elk.html", ElementName="ZoneState")]
    [global::System.ComponentModel.DescriptionAttribute("Zone State")]
    public enum ZoneState : byte {
        
        NormalUnconfigured = 0,
        
        NormalOpen = 1,
        
        NormalEOL = 2,
        
        NormalShort = 3,
        
        notused1 = 4,
        
        TroubleOpen = 5,
        
        TroubleEOL = 6,
        
        TroubleShort = 7,
        
        notused2 = 8,
        
        ViolatedOpen = 9,
        
        ViolatedEOL = 10,
        
        ViolatedShort = 11,
        
        notused3 = 12,
        
        BypassedOpen = 13,
        
        BypassedEOL = 14,
        
        BypassedShort = 15,
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://house.robot/2008/04/elk.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://house.robot/2008/04/elk.html", ElementName="OutputState")]
    [global::System.ComponentModel.DescriptionAttribute("Output Status")]
    public enum OutputState : byte {
        
        Off = 0,
        
        On = 1,
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("The Elk Security Panel services provides programmatic access to the Elk security " +
        "panel.")]
    [global::System.ComponentModel.DisplayNameAttribute("Elk Security Panel")]
    public class Contract {
        
        public const string Identifier = "http://house.robot/2008/04/elk.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://house.robot/2008/04/elk.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://house.robot/2008/04/elk.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.ElkOperations = new global::Robotics.Elk.Proxy.ElkOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ElkOperations, "http://house.robot/2008/04/elk.html", "ElkOperations", ""));
        }
        
        public global::Robotics.Elk.Proxy.ElkOperations ElkOperations;
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     DSS Runtime Version: 2.0.730.3
//     CLR Runtime Version: 2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using W3C.Soap;
using controller = Robotics.ZWave.Controller;
//using zw = ControlThink.ZWave;

using Microsoft.Dss.Core.DsspHttp;
using Microsoft.Dss.Core.DsspHttpUtilities;
using System.Collections.Specialized;
using System.Net;
using System.IO;
//using ControlThink.ZWave.Devices;
using Microsoft.Dss.Services.DefaultTarget;
using System.Diagnostics;


namespace Robotics.ZWave.Controller
{
    /// <summary>
    /// Implementation class for Zwavecontroller
    /// </summary>
    [DisplayName("ZWave Controller")]
    [Description("The ZWave Controller Service")]
    [Contract(Contract.Identifier)]
    public class ZWaveControllerService : DsspServiceBase
    {

        /// <summary>
        /// _state
        /// </summary>
        [ServiceState]
        private ZWaveControllerState _state = null;

        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/zwavecontroller", AllowMultipleInstances = false)]
        private ZWaveControllerOperations _mainPort = new ZWaveControllerOperations();

        DsspHttpUtilitiesPort _utilities;

        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public ZWaveControllerService(DsspServiceCreationPort creationPort) :
            base(creationPort)
        {
        }

        //zw.ZWaveController controller = new zw.ZWaveController();

        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
            base.Start();
            // Add service specific initialization here.

            _utilities = DsspHttpUtilitiesService.Create(Environment);

            LogInfo("Connecting to Z-Wave Controller");

            //controller.Connect();
        }

        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> SetDeviceLevelHandler(SetDeviceLevel update)
        {
            LogInfo(string.Format("ZWaveController => Id:{0} Level:{1}", update.Body.Id, update.Body.Level));

            //controller.Devices.GetByNodeID(update.Body.Id).Level = update.Body.Level;

            update.ResponsePort.Post(DefaultUpdateResponseType.Instance);
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> DeviceOnHandler(DeviceOn update)
        {
            LogInfo(string.Format("ZWaveController => Id:{0} On", update.Body.Id));

            //controller.Devices.GetByNodeID(update.Body.Id).PowerOn();

            update.ResponsePort.Post(DefaultUpdateResponseType.Instance);
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public IEnumerator<ITask> DeviceOffHandler(DeviceOff update)
        {
            LogInfo(string.Format("ZWaveController => Id:{0} Off", update.Body.Id));

            //controller.Devices.GetByNodeID(update.Body.Id).PowerOff();

            update.ResponsePort.Post(DefaultUpdateResponseType.Instance);
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Teardown)]
        public virtual IEnumerator<ITask> DropHandler(DsspDefaultDrop drop)
        {
            // Perform service specific shutdown logic including shutting
            // down dependent service instances
            LogInfo("Shutting down zwave controller");
            //if (controller != null)
            //    controller.Dispose();

            // Perform default shutdown logic
            base.DefaultDropHandler(drop);

            // Shutdown complete
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> HttpPostHandler(HttpPost httpPost)
        {
            var processedFormData = httpPost.GetHeader<HttpPostRequestData>();
            if (processedFormData == null)
                yield break;
                
            _mainPort.PostUnknownType(processedFormData.TranslatedOperation);
            
            //TODO: fix this to support a response.
            httpPost.ResponsePort.Post(new HttpResponseType(HttpStatusCode.OK, null));

            yield break;
        }


        //TODO: extension method...
        private static void HttpPostFailure(HttpPost httpPost, Fault fault)
        {
            httpPost.ResponsePort.Post(new HttpResponseType(HttpStatusCode.BadRequest, fault));
        }

    }
}
